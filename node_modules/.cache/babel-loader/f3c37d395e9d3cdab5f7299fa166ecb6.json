{"ast":null,"code":"var _jsxFileName = \"/Users/niizakitakuma/Downloads/react-highcharts-resas-demo-main/src/components/Main.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Styles = {\n  graph: {\n    padding: \"10px\"\n  },\n  label: {\n    fontSize: \"20px\",\n    padding: \"0.5rem 2rem\",\n    borderLeft: \"4px solid #000\",\n    marginLeft: \"10pt\"\n  }\n};\n\n// const Main: React.FC = () => {\n//   const [prefectures, setPreFectures] = useState<{\n//     message: null;\n//     result: {\n//       prefCode: number;\n//       prefName: string;\n//     }[];\n//   } | null>(null);\n//   const [prefPopulation, setPrefPopulation] = useState<\n//     { prefName: string; data: { year: number; value: number }[] }[]\n//   >([]);\n\n//   useEffect(() => {\n//     // 都道府県一覧を取得する\n//     axios\n//       .get(\"https://opendata.resas-portal.go.jp/api/v1/prefectures\", {\n//         headers: { \"X-API-KEY\": process.env.REACT_APP_API_KEY },\n//       })\n\n//       .then((results) => {\n//         setPreFectures(results.data);\n//         console.log(results.data);\n//       })\n//       .catch((error) => {})\n//   }, []);\n\n//   // チェックボックスをクリックした際の処理\n//   const handleClickCheck = (\n//     prefName: string,\n//     prefCode: number,\n//     check: boolean\n//   ) => {\n//     let c_prefPopulation = prefPopulation.slice();\n\n//     // チェックをつけた処理\n//     if (check) {\n//       if (\n//         c_prefPopulation.findIndex((value) => value.prefName === prefName) !==\n//         -1\n//       )\n//         return;\n\n//       axios\n//         .get(\n//           \"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\" +\n//             String(prefCode),\n//           {\n//             headers: { \"X-API-KEY\": process.env.REACT_APP_API_KEY},\n//           }\n//         )\n//         .then((results) => {\n//           c_prefPopulation.push({\n//             prefName: prefName,\n//             data: results.data.result.data[0].data,\n//           });\n\n//           setPrefPopulation(c_prefPopulation);\n//         })\n//         .catch((error) => {\n//           return;\n//         });\n//     }\n//     // チェックを外した処理\n//     else {\n//       const deleteIndex = c_prefPopulation.findIndex(\n//         (value) => value.prefName === prefName\n//       );\n//       if (deleteIndex === -1) return;\n//       c_prefPopulation.splice(deleteIndex, 1);\n//       setPrefPopulation(c_prefPopulation);\n//     }\n//   };\n\n//   return (\n//     <main>\n//       <h2 style={Styles.label}>都道府県</h2>\n//       {prefectures && (\n//         <CheckField\n//           prefectures={prefectures.result}\n//           onChange={handleClickCheck}\n//         />\n//       )}\n//       <h2 style={Styles.label}>人口推移グラフ</h2>\n//       <Graph populationdata={prefPopulation} />\n//     </main>\n//   );\n// };\n\n// export default Main;\n\nconst Main = () => {\n  _s();\n  const [prefectures, setPreFectures] = useState(\"\");\n  const [prefPopulation, setPrefPopulation] = useState(\"\");\n  useEffect(() => {\n    // 都道府県一覧を取得する\n    axios.get(\"https://opendata.resas-portal.go.jp/api/v1/prefectures\", {\n      headers: {\n        \"X-API-KEY\": process.env.REACT_APP_API_KEY\n      }\n    }).then(results => {\n      // console.log(prefCode);\n      setPreFectures(results.data);\n      console.log(results.data);\n    }).catch(error => {});\n  }, []);\n\n  // // チェックボックスをクリックした際の処理\n  // const handleClickCheck = (prefName:string, prefCode:number, check:boolean) => {\n  //   let c_prefPopulation = prefPopulation.slice();\n\n  //   // チェックをつけた処理\n  //   if (check) {\n  //     if (\n  //       c_prefPopulation.findIndex((value) => value.prefName === prefName) !==\n  //       -1\n  //     )\n  //       return;\n\n  //     axios\n  //       .get(\n  //         \"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\" +\n  //           String(prefCode),\n  //         {\n  //           headers: { \"X-API-KEY\": process.env.REACT_APP_API_KEY },\n  //         }\n  //       )\n  //       .then((results) => {\n  //         c_prefPopulation.push({\n  //           prefName: prefName,\n  //           data: results.data.result.data[0].data,\n  //         });\n  //         setPrefPopulation(c_prefPopulation);\n  //         console.log(prefPopulation);\n  //       })\n  //       .catch((error) => {\n  //         return;\n  //       });\n  //   }\n  //   // チェックを外した処理\n  //   else {\n  //     const deleteIndex = c_prefPopulation.findIndex(\n  //       (value) => value.prefName === prefName\n  //     );\n  //     if (deleteIndex === -1) return;\n  //     c_prefPopulation.splice(deleteIndex, 1);\n  //     setPrefPopulation(c_prefPopulation);\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u90FD\\u9053\\u5E9C\\u770C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u4EBA\\u53E3\\u63A8\\u79FB\\u30B0\\u30E9\\u30D5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"O+AcAqGu+UeL2P9EhIjdop35Hok=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","axios","Styles","graph","padding","label","fontSize","borderLeft","marginLeft","Main","prefectures","setPreFectures","prefPopulation","setPrefPopulation","get","headers","process","env","REACT_APP_API_KEY","then","results","data","console","log","catch","error"],"sources":["/Users/niizakitakuma/Downloads/react-highcharts-resas-demo-main/src/components/Main.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport CheckField from \"./CheckField\";\nimport Graph from \"./Graph\";\nimport axios from \"axios\";\n\nconst Styles: { [key: string]: React.CSSProperties } = {\n  graph: {\n    padding: \"10px\",\n  },\n  label: {\n    fontSize: \"20px\",\n    padding: \"0.5rem 2rem\",\n    borderLeft: \"4px solid #000\",\n    marginLeft: \"10pt\",\n  },\n};\n\n// const Main: React.FC = () => {\n//   const [prefectures, setPreFectures] = useState<{\n//     message: null;\n//     result: {\n//       prefCode: number;\n//       prefName: string;\n//     }[];\n//   } | null>(null);\n//   const [prefPopulation, setPrefPopulation] = useState<\n//     { prefName: string; data: { year: number; value: number }[] }[]\n//   >([]);\n\n \n//   useEffect(() => {\n//     // 都道府県一覧を取得する\n//     axios\n//       .get(\"https://opendata.resas-portal.go.jp/api/v1/prefectures\", {\n//         headers: { \"X-API-KEY\": process.env.REACT_APP_API_KEY },\n//       })\n      \n//       .then((results) => {\n//         setPreFectures(results.data);\n//         console.log(results.data);\n//       })\n//       .catch((error) => {})\n//   }, []);\n\n//   // チェックボックスをクリックした際の処理\n//   const handleClickCheck = (\n//     prefName: string,\n//     prefCode: number,\n//     check: boolean\n//   ) => {\n//     let c_prefPopulation = prefPopulation.slice();\n\n//     // チェックをつけた処理\n//     if (check) {\n//       if (\n//         c_prefPopulation.findIndex((value) => value.prefName === prefName) !==\n//         -1\n//       )\n//         return;\n\n//       axios\n//         .get(\n//           \"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\" +\n//             String(prefCode),\n//           {\n//             headers: { \"X-API-KEY\": process.env.REACT_APP_API_KEY},\n//           }\n//         )\n//         .then((results) => {\n//           c_prefPopulation.push({\n//             prefName: prefName,\n//             data: results.data.result.data[0].data,\n//           });\n\n//           setPrefPopulation(c_prefPopulation);\n//         })\n//         .catch((error) => {\n//           return;\n//         });\n//     }\n//     // チェックを外した処理\n//     else {\n//       const deleteIndex = c_prefPopulation.findIndex(\n//         (value) => value.prefName === prefName\n//       );\n//       if (deleteIndex === -1) return;\n//       c_prefPopulation.splice(deleteIndex, 1);\n//       setPrefPopulation(c_prefPopulation);\n//     }\n//   };\n\n//   return (\n//     <main>\n//       <h2 style={Styles.label}>都道府県</h2>\n//       {prefectures && (\n//         <CheckField\n//           prefectures={prefectures.result}\n//           onChange={handleClickCheck}\n//         />\n//       )}\n//       <h2 style={Styles.label}>人口推移グラフ</h2>\n//       <Graph populationdata={prefPopulation} />\n//     </main>\n//   );\n// };\n\n// export default Main;\n\n\nconst Main = () => {\n  const [prefectures, setPreFectures] = useState(\"\");\n  const [prefPopulation, setPrefPopulation] = useState(\"\"); \n\n  useEffect(() => {\n    // 都道府県一覧を取得する\n    axios\n      .get(\"https://opendata.resas-portal.go.jp/api/v1/prefectures\", {\n        headers: { \"X-API-KEY\": process.env.REACT_APP_API_KEY },\n      })\n      .then((results) => {\n        // console.log(prefCode);\n        setPreFectures(results.data);\n        console.log(results.data);\n      })\n      .catch((error) => {});\n  }, []);\n\n  // // チェックボックスをクリックした際の処理\n  // const handleClickCheck = (prefName:string, prefCode:number, check:boolean) => {\n  //   let c_prefPopulation = prefPopulation.slice();\n\n  //   // チェックをつけた処理\n  //   if (check) {\n  //     if (\n  //       c_prefPopulation.findIndex((value) => value.prefName === prefName) !==\n  //       -1\n  //     )\n  //       return;\n\n  //     axios\n  //       .get(\n  //         \"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\" +\n  //           String(prefCode),\n  //         {\n  //           headers: { \"X-API-KEY\": process.env.REACT_APP_API_KEY },\n  //         }\n  //       )\n  //       .then((results) => {\n  //         c_prefPopulation.push({\n  //           prefName: prefName,\n  //           data: results.data.result.data[0].data,\n  //         });\n  //         setPrefPopulation(c_prefPopulation);\n  //         console.log(prefPopulation);\n  //       })\n  //       .catch((error) => {\n  //         return;\n  //       });\n  //   }\n  //   // チェックを外した処理\n  //   else {\n  //     const deleteIndex = c_prefPopulation.findIndex(\n  //       (value) => value.prefName === prefName\n  //     );\n  //     if (deleteIndex === -1) return;\n  //     c_prefPopulation.splice(deleteIndex, 1);\n  //     setPrefPopulation(c_prefPopulation);\n  //   }\n  // };\n\n  return (\n    <main>\n      <h2>都道府県</h2>\n      {/* {prefectures && (\n        <CheckField\n          prefectures={prefectures.result}\n          onChange={handleClickCheck}\n        />\n      )} */}\n      <h2>人口推移グラフ</h2>\n      {/* <Chart populationdata={prefPopulation} /> */}\n    </main>\n  );\n};\n\nexport default Main;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAGlD,OAAOC,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,MAA8C,GAAG;EACrDC,KAAK,EAAE;IACLC,OAAO,EAAE;EACX,CAAC;EACDC,KAAK,EAAE;IACLC,QAAQ,EAAE,MAAM;IAChBF,OAAO,EAAE,aAAa;IACtBG,UAAU,EAAE,gBAAgB;IAC5BC,UAAU,EAAE;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,MAAMC,IAAI,GAAG,MAAM;EAAA;EACjB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd;IACAE,KAAK,CACFa,GAAG,CAAC,wDAAwD,EAAE;MAC7DC,OAAO,EAAE;QAAE,WAAW,EAAEC,OAAO,CAACC,GAAG,CAACC;MAAkB;IACxD,CAAC,CAAC,CACDC,IAAI,CAAEC,OAAO,IAAK;MACjB;MACAT,cAAc,CAACS,OAAO,CAACC,IAAI,CAAC;MAC5BC,OAAO,CAACC,GAAG,CAACH,OAAO,CAACC,IAAI,CAAC;IAC3B,CAAC,CAAC,CACDG,KAAK,CAAEC,KAAK,IAAK,CAAC,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAa,eAOb;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB;EAAA;IAAA;IAAA;IAAA;EAAA,QAEX;AAEX,CAAC;AAAC,GA1EIhB,IAAI;AAAA,KAAJA,IAAI;AA4EV,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module"}