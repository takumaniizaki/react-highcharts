{"version":3,"sources":["components/CheckField.tsx","components/Graph.tsx","components/apiKey2.tsx","components/Main.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Styles","checkcardList","display","flexWrap","padding","justifyContent","justifySelf","text","marginLeft","cursor","checkcard","borderRadius","border","textAlign","margin","CheckField","prefectures","onChange","style","map","prefecture","type","name","event","prefName","prefCode","target","checked","id","htmlFor","length","graph","Graph","populationdata","series","categories","p","data","pd","push","value","String","year","options","title","xAxis","yAxis","highcharts","Highcharts","apiKey","label","fontSize","borderLeft","Main","useState","setPreFectures","prefPopulation","setPrefPopulation","useEffect","axios","get","headers","then","results","catch","error","result","check","c_prefPopulation","slice","findIndex","deleteIndex","splice","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6c0a1f5d.chunk.js","sourcesContent":["import React from \"react\";\n\ntype Props = {\n  prefectures:\n    | {\n        prefCode: number;\n        prefName: string;\n      }[];\n\n  onChange: (name: string, prefName: number, check: boolean) => void;\n};\n\nconst Styles: { [key: string]: React.CSSProperties } = {\n  checkcardList: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    padding: \"10px\",\n    justifyContent: \"flex-start\",\n    justifySelf: \"auto\",\n  },\n  text: { display: \"contents\", marginLeft: \"1em\", cursor: \"pointer\" },\n  checkcard: {\n    borderRadius: \"24px\",\n    border: \"solid 2px\",\n    textAlign: \"center\",\n    padding: \"4px\",\n    margin: \"0.5rem\",\n  },\n};\n\n// 都道府県一覧のチェックボックスを表示するコンポーネント\nconst CheckField: React.FC<Props> = ({ prefectures, onChange }) => {\n  return (\n    <>\n      <div style={Styles.checkcardList}>\n        {prefectures?.map((prefecture) => (\n          <div style={Styles.checkcard} key={prefecture.prefName}>\n            <input\n              type=\"checkbox\"\n              name=\"Prefecture name\"\n              onChange={(event) =>\n                onChange(\n                  prefecture.prefName,\n                  prefecture.prefCode,\n                  event.target.checked\n                )\n              }\n              id={\"checkbox\" + prefecture.prefCode}\n            />\n            <label\n              style={Styles.text}\n              htmlFor={\"checkbox\" + prefecture.prefCode}\n            >\n              {prefecture.prefName.length === 3\n                ? \"　\" + prefecture.prefName\n                : prefecture.prefName}\n            </label>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default CheckField;\n","import React from \"react\";\nimport Highcharts from \"highcharts\";\nimport HighchartsReact from \"highcharts-react-official\";\n\nconst Styles: { [key: string]: React.CSSProperties } = {\n  graph: {\n    padding: \"12px\",\n  },\n};\n\ntype Props = {\n  populationdata: {\n    prefName: string;\n    data: { year: number; value: number }[];\n  }[];\n};\n\n// 選んだ都道府県の人口推移グラフを表示するコンポーネント\nconst Graph: React.FC<Props> = ({ populationdata }) => {\n  let series: Highcharts.SeriesOptionsType[] = [];\n  let categories = [];\n\n  for (let p of populationdata) {\n    let data = [];\n\n    for (let pd of p.data) {\n      data.push(pd.value);\n      categories.push(String(pd.year));\n    }\n\n    series.push({\n      type: \"line\",\n      name: p.prefName,\n      data: data,\n    });\n  }\n\n  const options: Highcharts.Options = {\n    title: {\n      text: \"総人口推移\",\n    },\n    xAxis: {\n      title: {\n        text: \"年度\",\n      },\n      categories: categories,\n    },\n    yAxis: {\n      title: {\n        text: \"人口数\",\n      },\n    },\n    // 都道府県を一つも選んでいない場合との分岐条件\n    series:\n      series.length === 0\n        ? [{ type: \"line\", name: \"都道府県名\", data: [] }]\n        : series,\n  };\n\n  return (\n    <div style={Styles.graph}>\n      <HighchartsReact highcharts={Highcharts} options={options} />\n    </div>\n  );\n};\n\nexport default Graph;\n","const apiKey = \"wCt9waE9niVF7LuW77s28VJatkyoCtWwVJ1aioBx\";\n\nexport default apiKey;","import React, { useEffect, useState } from \"react\";\nimport CheckField from \"./CheckField\";\nimport Graph from \"./Graph\";\nimport axios from \"axios\";\nimport apiKey from \"./apiKey2\";\n\nconst Styles: { [key: string]: React.CSSProperties } = {\n  graph: {\n    padding: \"10px\",\n  },\n  label: {\n    fontSize: \"20px\",\n    padding: \"0.5rem 2rem\",\n    borderLeft: \"4px solid #000\",\n    marginLeft: \"10pt\",\n  },\n};\n\nconst Main: React.FC = () => {\n  const [prefectures, setPreFectures] = useState<{\n    message: null;\n    result: {\n      prefCode: number;\n      prefName: string;\n    }[];\n  } | null>(null);\n  const [prefPopulation, setPrefPopulation] = useState<\n    { prefName: string; data: { year: number; value: number }[] }[]\n  >([]);\n\n \n  useEffect(() => {\n    // 都道府県一覧を取得する\n    axios\n      .get(\"https://opendata.resas-portal.go.jp/api/v1/prefectures\", {\n        headers: { 'X-API-KEY': apiKey },\n      })\n      \n      .then((results) => {\n        setPreFectures(results.data);\n      })\n      .catch((error) => {})\n  }, []);\n\n  // チェックボックスをクリックした際の処理\n  const handleClickCheck = (\n    prefName: string,\n    prefCode: number,\n    check: boolean\n  ) => {\n    let c_prefPopulation = prefPopulation.slice();\n\n    // チェックをつけた処理\n    if (check) {\n      if (\n        c_prefPopulation.findIndex((value) => value.prefName === prefName) !==\n        -1\n      )\n        return;\n\n      axios\n        .get(\n          \"https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?prefCode=\" +\n            String(prefCode),\n          {\n            headers: { \"X-API-KEY\": apiKey},\n          }\n        )\n        .then((results) => {\n          c_prefPopulation.push({\n            prefName: prefName,\n            data: results.data.result.data[0].data,\n          });\n\n          setPrefPopulation(c_prefPopulation);\n        })\n        .catch((error) => {\n          return;\n        });\n    }\n    // チェックを外した処理\n    else {\n      const deleteIndex = c_prefPopulation.findIndex(\n        (value) => value.prefName === prefName\n      );\n      if (deleteIndex === -1) return;\n      c_prefPopulation.splice(deleteIndex, 1);\n      setPrefPopulation(c_prefPopulation);\n    }\n  };\n\n  return (\n    <main>\n      <h2 style={Styles.label}>都道府県</h2>\n      {prefectures && (\n        <CheckField\n          prefectures={prefectures.result}\n          onChange={handleClickCheck}\n        />\n      )}\n      <h2 style={Styles.label}>人口推移グラフ</h2>\n      <Graph populationdata={prefPopulation} />\n    </main>\n  );\n};\n\nexport default Main;\n\n\n","import React from \"react\";\nimport Main from \"./components/Main\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header style={{ textAlign: \"center\" }}>\n        <h1>都道府県別人口推移</h1>\n      </header>\n      <Main />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'; \nimport ReactDOM from 'react-dom';\nimport './index.css'; \nimport App from './App';\nimport reportWebVitals from './reportWebVitals'; \n\n// const container = document.getElementById('app');\n// render(<App />, container);\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}